1. 포스트 읽기 UI 준비
  1-1) 구현할 UI : 포스트 제목, 계정명, 작성 시간, 태그, 제목, 내용
  1-2) components/post/PostViewer.js 생성
  1-3) PostPage.js에 HeaderContainer, PostViewer 렌더링

2. 포스트 읽기 API 연동
  2-1) lib/api/posts.js에 readPost 함수 추가
  2-2) modules/post.js 작성
  2-3) modules/index.js에 루트 리듀서와 루트 사가에 post.js에서 작성한 리덕스 모듈 등록
  2-4) PostViewer를 위한 컨테이너 컴포넌트 생성 (containers/post/PostVviewerContainer.js)
  2-5) /PostPage.js에서 PostViewer > PostviewerContainer
  2-6) components/post/PostViewer.js에서 props 사용
 

3. 포스트 목록 UI 준비
  3-1) componets/posts/PostList.js 생성
  3-2) componets/common/SubInfo.js, /Tags.js 생성
  3-3) components/posts/PostList.js에서 SubInfo.js, Tags.js 렌더링
  3-4) pages/PostListPage.js에서 PostList 렌더링
  3-5) /post/PostViewer.js에도 SubInfo.js, Tags.js 추가


4. 포스트 목록 API 연동
  4-1) 설치 라이브러리 (yarn add qs - 쿼리 값을 더 편리하게 생성하고 JSON 변환 가능)
  4-2) lib/api/posts.js에 qs 관련 함수 추가
  4-3) posts.js 요청 상태 관리하는 모듈 생성 (modules/posts.js)
  4-4) index.js의 루트 리듀서와 루트 사가에 posts.js 리듀서와 사가 등록
  4-5) 주소의 쿼리 파라미터를 추출하여 우리가 생성한 listPosts API를 호출 (containers/posts/PostListContainer.js)
  4-6) /PostListPage.js에서 PostList > PostListContainer 변경
  4-7) /posts/PostList.js는 PostList에서 props를 받아와 사용

 
5. HTML 필터링
  5-1) 백엔드 서버에 yarn add sanitize-html 설치 (HTML 작성하고 보여 주어야 하는 서비스에서 유용)
  5-2) 백엔드 src/api/posts/posts.ctrl.js에 임포트 시키고, 200자 제한하는 함수, 포스트의 작성 및 수정에 관한 것 수정 (모든 HTML 제거 x, 특정 태그만 허용)
  

6. 페이지네이션 구현
  6-1) 헤더를 확인할 수 있게끔 수정 (lib/createRequestSaga.js)
  6-2) modules/posts.js 수정
  6-3) 페이지네이션을 위한 컴포넌트 작성 (components/posts/Pagination.js)
     6-3-1) props로 현재 선택된 계정명, 태그, 현재 페이시 숫자, 마지막 페이지 숫자를 가져옴
  6-4) /Button.js에서 비활성화된 스타일 지정
  6-5) Pagination.js를 위한 컨테이너 생성(PaginationContainer.js)
  6-6) /PostListPage에 컨테이너 컴포넌트 렌더링
