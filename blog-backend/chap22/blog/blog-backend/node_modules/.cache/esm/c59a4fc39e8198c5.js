let Post,mongoose,Joi;_9e8‍.x([["checkObjectId",()=>checkObjectId],["write",()=>write]]);_9e8‍.w("../../models/post",[["default",["Post"],function(v){Post=v}]]);_9e8‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_9e8‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);



const {ObjectId} = mongoose.Types;

       const checkObjectId = (ctx, next) => {
  const {id} = ctx.params;
  if(!ObjectId.isValid(id)){
    ctx.status = 400; // Bad Request
    return;
  }
  return next();
}

/*
  POST /api/posts
  {
    title: '제목',
    body : '내용',
    tags : '['태그 1', '태그2']
  }
*/
       const write = async ctx =>{
  const schema = Joi.object().keys({
    // 객체가 다음 필드를 가지고 있음을 검증
    title: Joi.string().required(), // required()가 있으면 필수 항목
    bpdy: Joi.string().required(),
    tags: Joi.array().items(Joi.string()).required(),
  });

  // 검증하고 나서 검증 실패인 경우 에러 처리
  const result = schema.validate(ctx.request.body);
  if(result.error){
    ctx.status = 400; // bad request
    ctx.body = result.error;
    return;
  }

  const {title, body, tags} = ctx.request.body;
  const post = new Post({
    title,
    body,
    tags,
  });
  try{
    await post.save();
    ctx.body = post;
  } catch(e){
    ctx.throw(500, e);
  }
}
