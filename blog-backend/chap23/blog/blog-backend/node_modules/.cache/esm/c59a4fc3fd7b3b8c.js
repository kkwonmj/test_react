let Post,mongoose,Joi;_fd7‍.x([["getPostById",()=>getPostById],["write",()=>write],["list",()=>list],["read",()=>read],["remove",()=>remove],["update",()=>update]]);_fd7‍.w("../../models/post",[["default",["Post"],function(v){Post=v}]]);_fd7‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_fd7‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);



const {ObjectId} = mongoose.Types;

       const getPostById = async (ctx, next) => {
  const {id} = ctx.params;
  if(!ObjectId.isValid(id)) {
    ctx.status = 400; // Bad Request
    return;
  }
  try{
    const post = await Post.findById(id);
    // 포스트가 존재하지 않을 때
    if(!post){
      ctx.status = 404; // Not Found
      return;
    }
    ctx.state.post = post;
    return next();
  } catch (e){
    ctx.throw(500, e);
  }
};

/*
  POST /api/posts
  {
    title: '제목',
    body : '내용',
    tags : '['태그 1', '태그2']
  }
*/
       const write = async ctx =>{
  const schema = Joi.object().keys({
    // 객체가 다음 필드를 가지고 있음을 검증
    title: Joi.string().required(), // required()가 있으면 필수 항목
    body: Joi.string().required(),
    tags: Joi.array().items(Joi.string()).required(),
  });

  // 검증하고 나서 검증 실패인 경우 에러 처리
  const result = schema.validate(ctx.request.body);
  if(result.error){
    ctx.status = 400; // bad request
    ctx.body = result.error;
    return;
  }
  
  const {title, body, tags} = ctx.request.body;
  const post = new Post({
    title,
    body,
    tags,
    user: ctx.state.user,
  });
  try{
    await post.save();
    ctx.body = post;
  } catch(e){
    ctx.throw(500, e);
  }
}


/*
  GET /api/posts
*/
       const list = async ctx => {
  // query는 문자열이기 때문에 숫자로 변환해 줘야 함
  // 값이 주어지지 않았다면 1을 기본으로 사용해야 함
  const page = parseInt(ctx.query.page || '1', 10);

  if (page < 1){
    ctx.status = 400;
    return;
  }
  try{
    const posts = await Post.find()
      .sort({_id : -1})
      .limit(10)
      .skip((page - 1) * 10)
      .lean()
      .exec(); // exec()까지 붙여 줘야 서버에 쿼리를 요청
    const postCount = await Post.countDocuments().exec();  
    ctx.set('Last-Page', Math.ceil(postCount/10));
    ctx.body = posts.map(post => ({
        ...post,
        body:
          post.body.length < 200 ? post.body : `${post.body.slice(0, 200)}...`,
      }));
  } catch (e) {
    ctx.throw(500, e)
  }
};


/*
  GET /api/posts/:id
*/
       const read = async ctx => {
  ctx.body = ctx.state.post;
};


/*
DELETE /api/posts/:id
*/
       const remove = async ctx => {
  const {id} = ctx.params;
  try{
    await Post.findByIdAndDelete(id).exec();
    ctx.status = 204; // No Content (성공하기는 했지만 응답할 데이터는 없음)
  } catch(e){
    ctx.throw(500, e);
  }
};

/*
  PATCH /api/posts/:id
  {
    title: '수정',
    body : '수정 내용',
    tags : ['수정', '태그']
  }
*/
       const update = async ctx => {
  const {id} = ctx.params;
  // write에서 사용한 schema와 비슷한데 required()가 없음
  const schema = Joi.object().keys({
    title: Joi.string(),
    body: Joi.string(),
    tags: Joi.array().items(Joi.string()),
  })
  const result = schema.validate(ctx.request.body);
  if(result.error){
    ctx.status = 400; // bad request
    ctx.body = result.error;
    return;
  }
  try{
    const post = await Post.findByIdAndUpdate(id, ctx.request.body, {
      new: true, // 이 값을 설정하면 업데이트된 데이터를 반환함, false일 시 업데이트되기 전의 데이터를 반환
    }).exec();
  if(!post){
    ctx.status = 404;
    return;
  }
  ctx.pody = post;
  } catch(e){
    ctx.throw(500, e);
  }
};