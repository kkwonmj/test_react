{"ast":null,"code":"var _jsxFileName = \"C:\\\\java\\\\react\\\\project_git\\\\blog-frontend\\\\src\\\\components\\\\write\\\\TagBox.js\";\nimport React, { useState, useCallback, useEffect } from 'react';\nimport styled from 'styled-components';\nimport palette from '../../lib/styles/palette';\nconst TagBoxBlock = styled.div`\n  width: 100%;\n  border-top: 1px solid ${palette.gray[2]};\n  padding-top: 2rem;\n\n  h4 {\n    color: ${palette.gray[8]}\n    margin-top: 0;\n    margin-bottom: 0.5rem;\n  }\n`;\nconst TagForm = styled.form`\n  border-radius: 4px;\n  overflow: hidden;\n  display: flex;\n  width: 256px;\n  border: 1px solid ${palette.gray[9]}; /* 스타일 초기화 */\n  input,\n  button {\n    outline: none;\n    border: none;\n    font-size: 1rem;\n  }\n\n  input {\n    padding: 0.5rem;\n    flex: 1;\n  }\n  button {\n    cursor: pointer;\n    padding-right: 1rem;\n    padding-left: 1rem;\n    border: none;\n    background: ${palette.gray[8]};\n    color: white;\n    font-weight: bold;\n    &:hover {\n      background: ${palette.gray[6]};\n    }\n  }\n`;\nconst Tag = styled.div`\n  margin-right: 0.5rem;\n  color: ${palette.gray[6]};\n  cursor: pointer;\n  &:hover {\n    opacity: 0.5;\n  }\n`;\nconst TagListBlock = styled.div`\n  display: flex;\n  margin-top: 0.5rem;\n`; // React.memo를 사용하여 tag 값이 바뀔 때만 리렌더링되도록 처리\n\nconst TagItem = React.memo(_ref => {\n  let {\n    tag,\n    onRemove,\n    onChangeTags\n  } = _ref;\n  return /*#__PURE__*/React.createElement(Tag, {\n    onClick: () => onRemove(tag),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 3\n    }\n  }, \"#\", tag);\n}); // React.memo를 사용하여 tags 값이 바뀔 때만 리렌더링되도록 처리\n\nconst TagList = React.memo(_ref2 => {\n  let {\n    tags,\n    onRemove\n  } = _ref2;\n  return /*#__PURE__*/React.createElement(TagListBlock, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 3\n    }\n  }, tags.map(tag => /*#__PURE__*/React.createElement(TagItem, {\n    key: tag,\n    tag: tag,\n    onRemove: onRemove,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  })));\n});\n\nconst TagBox = _ref3 => {\n  let {\n    tags,\n    onChangeTags\n  } = _ref3;\n  const [input, setInput] = useState('');\n  const [localTags, setLocalTags] = useState([]);\n  const insertTag = useCallback(tag => {\n    if (!tag) return; // 공백이라면 추가하지 않음\n\n    if (localTags.includes(tag)) return; // 이미 존재한다면 추가하지 않음\n\n    const nextTags = [...localTags, tag];\n    setLocalTags(nextTags);\n    onChangeTags(nextTags);\n  }, [localTags, onChangeTags]);\n  const onRemove = useCallback(tag => {\n    const nextTags = localTags.filter(t => t !== tag);\n    setLocalTags(nextTags);\n    onChangeTags(nextTags);\n  }, [localTags, onChangeTags]);\n  const onChange = useCallback(e => {\n    setInput(e.target.value);\n  }, []);\n  const onSubmit = useCallback(e => {\n    e.preventDefault();\n    insertTag(input.trim()); // 앞뒤 공백 없앤 후 등록\n\n    setInput(''); // input 초기화\n  }, [input, insertTag]); // tags 값이 바뀔 때\n\n  useEffect(() => {\n    setLocalTags(tags);\n  }, [tags]);\n  return /*#__PURE__*/React.createElement(TagBoxBlock, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }, \"\\uD0DC\\uADF8\"), /*#__PURE__*/React.createElement(TagForm, {\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    placeholder: \"\\uD0DC\\uADF8\\uB97C \\uC785\\uB825\\uD558\\uC138\\uC694\",\n    value: input,\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }, \"\\uCD94\\uAC00\")), /*#__PURE__*/React.createElement(TagList, {\n    tags: localTags,\n    onRemove: onRemove,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default TagBox;","map":{"version":3,"sources":["C:/java/react/project_git/blog-frontend/src/components/write/TagBox.js"],"names":["React","useState","useCallback","useEffect","styled","palette","TagBoxBlock","div","gray","TagForm","form","Tag","TagListBlock","TagItem","memo","tag","onRemove","onChangeTags","TagList","tags","map","TagBox","input","setInput","localTags","setLocalTags","insertTag","includes","nextTags","filter","t","onChange","e","target","value","onSubmit","preventDefault","trim"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport palette from '../../lib/styles/palette';\r\n\r\nconst TagBoxBlock = styled.div`\r\n  width: 100%;\r\n  border-top: 1px solid ${palette.gray[2]};\r\n  padding-top: 2rem;\r\n\r\n  h4 {\r\n    color: ${palette.gray[8]}\r\n    margin-top: 0;\r\n    margin-bottom: 0.5rem;\r\n  }\r\n`;\r\n\r\nconst TagForm = styled.form`\r\n  border-radius: 4px;\r\n  overflow: hidden;\r\n  display: flex;\r\n  width: 256px;\r\n  border: 1px solid ${palette.gray[9]}; /* 스타일 초기화 */\r\n  input,\r\n  button {\r\n    outline: none;\r\n    border: none;\r\n    font-size: 1rem;\r\n  }\r\n\r\n  input {\r\n    padding: 0.5rem;\r\n    flex: 1;\r\n  }\r\n  button {\r\n    cursor: pointer;\r\n    padding-right: 1rem;\r\n    padding-left: 1rem;\r\n    border: none;\r\n    background: ${palette.gray[8]};\r\n    color: white;\r\n    font-weight: bold;\r\n    &:hover {\r\n      background: ${palette.gray[6]};\r\n    }\r\n  }\r\n`;\r\n\r\nconst Tag = styled.div`\r\n  margin-right: 0.5rem;\r\n  color: ${palette.gray[6]};\r\n  cursor: pointer;\r\n  &:hover {\r\n    opacity: 0.5;\r\n  }\r\n`;\r\n\r\nconst TagListBlock = styled.div`\r\n  display: flex;\r\n  margin-top: 0.5rem;\r\n`;\r\n\r\n// React.memo를 사용하여 tag 값이 바뀔 때만 리렌더링되도록 처리\r\nconst TagItem = React.memo(({ tag, onRemove, onChangeTags }) => (\r\n  <Tag onClick={() => onRemove(tag)}>#{tag}</Tag>\r\n));\r\n\r\n// React.memo를 사용하여 tags 값이 바뀔 때만 리렌더링되도록 처리\r\nconst TagList = React.memo(({ tags, onRemove }) => (\r\n  <TagListBlock>\r\n    {tags.map(tag => (\r\n      <TagItem key={tag} tag={tag} onRemove={onRemove} />\r\n    ))}\r\n  </TagListBlock>\r\n));\r\n\r\nconst TagBox = ({ tags, onChangeTags }) => {\r\n  const [input, setInput] = useState('');\r\n  const [localTags, setLocalTags] = useState([]);\r\n\r\n  const insertTag = useCallback(\r\n    tag => {\r\n      if (!tag) return; // 공백이라면 추가하지 않음\r\n      if (localTags.includes(tag)) return; // 이미 존재한다면 추가하지 않음\r\n      const nextTags = [...localTags, tag];\r\n      setLocalTags(nextTags);\r\n      onChangeTags(nextTags);\r\n    },\r\n    [localTags, onChangeTags],\r\n  );\r\n\r\n  const onRemove = useCallback(\r\n    tag => {\r\n      const nextTags = localTags.filter(t => t !== tag);\r\n      setLocalTags(nextTags);\r\n      onChangeTags(nextTags);\r\n    },\r\n    [localTags, onChangeTags],\r\n  );\r\n\r\n  const onChange = useCallback(e => {\r\n    setInput(e.target.value);\r\n  }, []);\r\n\r\n  const onSubmit = useCallback(\r\n    e => {\r\n      e.preventDefault();\r\n      insertTag(input.trim()); // 앞뒤 공백 없앤 후 등록\r\n      setInput(''); // input 초기화\r\n    },\r\n    [input, insertTag],\r\n  );\r\n\r\n  // tags 값이 바뀔 때\r\n  useEffect(() => {\r\n    setLocalTags(tags);\r\n  }, [tags]);\r\n\r\n  return (\r\n    <TagBoxBlock>\r\n      <h4>태그</h4>\r\n      <TagForm onSubmit={onSubmit}>\r\n        <input\r\n          placeholder=\"태그를 입력하세요\"\r\n          value={input}\r\n          onChange={onChange}\r\n        />\r\n        <button type=\"submit\">추가</button>\r\n      </TagForm>\r\n      <TagList tags={localTags} onRemove={onRemove} />\r\n    </TagBoxBlock>\r\n  );\r\n};\r\n\r\nexport default TagBox;\r\n"]},"metadata":{},"sourceType":"module"}