{"ast":null,"code":"var _jsxFileName = \"C:\\\\java\\\\react\\\\project_git\\\\blog-frontend\\\\src\\\\containers\\\\write\\\\WriteActionButtonsContainer.js\";\nimport React, { useEffect } from 'react';\nimport WriteActionButtons from '../../components/write/WriteActionButtons';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { writePost, updatePost } from '../../modules/write';\n\nconst WriteActionButtonsContainer = _ref => {\n  let {\n    history\n  } = _ref;\n  const dispatch = useDispatch();\n  const {\n    title,\n    body,\n    tags,\n    post,\n    postError,\n    originalPostId\n  } = useSelector(_ref2 => {\n    let {\n      write\n    } = _ref2;\n    return {\n      title: write.title,\n      body: write.body,\n      tags: write.tags,\n      post: write.post,\n      postError: write.postError,\n      originalPostId: write.originalPostId\n    };\n  }); // 포스트 등록\n\n  const onPublish = () => {\n    if (originalPostId) {\n      dispatch(updatePost({\n        title,\n        body,\n        tags,\n        id: originalPostId\n      }));\n      return;\n    }\n\n    dispatch(writePost({\n      title,\n      body,\n      tags\n    }));\n  }; // 취소\n\n\n  const onCancel = () => {\n    history.goBack();\n  }; // 성공 혹은 실패시 할 작업\n\n\n  useEffect(() => {\n    if (post) {\n      const {\n        _id,\n        user\n      } = post;\n      history.push(`/@${user.username}/${_id}`);\n    }\n\n    if (postError) {\n      console.log(postError);\n    }\n  }, [history, post, postError]);\n  return /*#__PURE__*/React.createElement(WriteActionButtons, {\n    onPublish: onPublish,\n    onCancel: onCancel,\n    isEdit: !!originalPostId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default withRouter(WriteActionButtonsContainer);","map":{"version":3,"sources":["C:/java/react/project_git/blog-frontend/src/containers/write/WriteActionButtonsContainer.js"],"names":["React","useEffect","WriteActionButtons","useSelector","useDispatch","withRouter","writePost","updatePost","WriteActionButtonsContainer","history","dispatch","title","body","tags","post","postError","originalPostId","write","onPublish","id","onCancel","goBack","_id","user","push","username","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,kBAAP,MAA+B,2CAA/B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,qBAAtC;;AAEA,MAAMC,2BAA2B,GAAG,QAAiB;AAAA,MAAhB;AAAEC,IAAAA;AAAF,GAAgB;AACnD,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAM;AAAEO,IAAAA,KAAF;AAASC,IAAAA,IAAT;AAAeC,IAAAA,IAAf;AAAqBC,IAAAA,IAArB;AAA2BC,IAAAA,SAA3B;AAAsCC,IAAAA;AAAtC,MAAyDb,WAAW,CACxE;AAAA,QAAC;AAAEc,MAAAA;AAAF,KAAD;AAAA,WAAgB;AACdN,MAAAA,KAAK,EAAEM,KAAK,CAACN,KADC;AAEdC,MAAAA,IAAI,EAAEK,KAAK,CAACL,IAFE;AAGdC,MAAAA,IAAI,EAAEI,KAAK,CAACJ,IAHE;AAIdC,MAAAA,IAAI,EAAEG,KAAK,CAACH,IAJE;AAKdC,MAAAA,SAAS,EAAEE,KAAK,CAACF,SALH;AAMdC,MAAAA,cAAc,EAAEC,KAAK,CAACD;AANR,KAAhB;AAAA,GADwE,CAA1E,CAFmD,CAanD;;AACA,QAAME,SAAS,GAAG,MAAM;AACtB,QAAIF,cAAJ,EAAoB;AAClBN,MAAAA,QAAQ,CAACH,UAAU,CAAC;AAAEI,QAAAA,KAAF;AAASC,QAAAA,IAAT;AAAeC,QAAAA,IAAf;AAAqBM,QAAAA,EAAE,EAAEH;AAAzB,OAAD,CAAX,CAAR;AACA;AACD;;AACDN,IAAAA,QAAQ,CACNJ,SAAS,CAAC;AACRK,MAAAA,KADQ;AAERC,MAAAA,IAFQ;AAGRC,MAAAA;AAHQ,KAAD,CADH,CAAR;AAOD,GAZD,CAdmD,CA4BnD;;;AACA,QAAMO,QAAQ,GAAG,MAAM;AACrBX,IAAAA,OAAO,CAACY,MAAR;AACD,GAFD,CA7BmD,CAiCnD;;;AACApB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,IAAJ,EAAU;AACR,YAAM;AAAEQ,QAAAA,GAAF;AAAOC,QAAAA;AAAP,UAAgBT,IAAtB;AACAL,MAAAA,OAAO,CAACe,IAAR,CAAc,KAAID,IAAI,CAACE,QAAS,IAAGH,GAAI,EAAvC;AACD;;AACD,QAAIP,SAAJ,EAAe;AACbW,MAAAA,OAAO,CAACC,GAAR,CAAYZ,SAAZ;AACD;AACF,GARQ,EAQN,CAACN,OAAD,EAAUK,IAAV,EAAgBC,SAAhB,CARM,CAAT;AASA,sBACE,oBAAC,kBAAD;AACE,IAAA,SAAS,EAAEG,SADb;AAEE,IAAA,QAAQ,EAAEE,QAFZ;AAGE,IAAA,MAAM,EAAE,CAAC,CAACJ,cAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAOD,CAlDD;;AAoDA,eAAeX,UAAU,CAACG,2BAAD,CAAzB","sourcesContent":["import React, { useEffect } from 'react';\r\nimport WriteActionButtons from '../../components/write/WriteActionButtons';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { writePost, updatePost } from '../../modules/write';\r\n\r\nconst WriteActionButtonsContainer = ({ history }) => {\r\n  const dispatch = useDispatch();\r\n  const { title, body, tags, post, postError, originalPostId } = useSelector(\r\n    ({ write }) => ({\r\n      title: write.title,\r\n      body: write.body,\r\n      tags: write.tags,\r\n      post: write.post,\r\n      postError: write.postError,\r\n      originalPostId: write.originalPostId,\r\n    }),\r\n  );\r\n\r\n  // 포스트 등록\r\n  const onPublish = () => {\r\n    if (originalPostId) {\r\n      dispatch(updatePost({ title, body, tags, id: originalPostId }));\r\n      return;\r\n    }\r\n    dispatch(\r\n      writePost({\r\n        title,\r\n        body,\r\n        tags,\r\n      }),\r\n    );\r\n  };\r\n\r\n  // 취소\r\n  const onCancel = () => {\r\n    history.goBack();\r\n  };\r\n\r\n  // 성공 혹은 실패시 할 작업\r\n  useEffect(() => {\r\n    if (post) {\r\n      const { _id, user } = post;\r\n      history.push(`/@${user.username}/${_id}`);\r\n    }\r\n    if (postError) {\r\n      console.log(postError);\r\n    }\r\n  }, [history, post, postError]);\r\n  return (\r\n    <WriteActionButtons\r\n      onPublish={onPublish}\r\n      onCancel={onCancel}\r\n      isEdit={!!originalPostId}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(WriteActionButtonsContainer);\r\n"]},"metadata":{},"sourceType":"module"}