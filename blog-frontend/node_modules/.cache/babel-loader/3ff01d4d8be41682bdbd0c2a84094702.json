{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\nconst INITIALIZE = 'write/INITIALIZE'; // 모든 내용 초기화\n\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; // 특정 key 값 바꾸기\n\nconst [WRITE_POST, WRITE_POST_SUCCESS, WRITE_POST_FAILURE] = createRequestActionTypes('write/WRITE_POST'); // 포스트 작성\n\nconst SET_ORIGINAL_POST = 'write/SET_ORIGINAL_POST';\nconst [UPDATE_POST, UPDATE_POST_SUCCESS, UPDATE_POST_FAILURE] = createRequestActionTypes('write/UPDATE_POST'); // 포스트 수정\n\nexport const initialize = createAction(INITIALIZE);\nexport const changeField = createAction(CHANGE_FIELD, _ref => {\n  let {\n    key,\n    value\n  } = _ref;\n  return {\n    key,\n    value\n  };\n});\nexport const writePost = createAction(WRITE_POST, _ref2 => {\n  let {\n    title,\n    body,\n    tags\n  } = _ref2;\n  return {\n    title,\n    body,\n    tags\n  };\n});\nexport const setOriginalPost = createAction(SET_ORIGINAL_POST, post => post);\nexport const updatePost = createAction(UPDATE_POST, _ref3 => {\n  let {\n    id,\n    title,\n    body,\n    tags\n  } = _ref3;\n  return {\n    id,\n    title,\n    body,\n    tags\n  };\n}); // saga 생성\n\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.writePost);\nconst updatePostSaga = createRequestSaga(UPDATE_POST, postsAPI.updatePost);\nexport function* writeSaga() {\n  yield takeLatest(WRITE_POST, writePostSaga);\n  yield takeLatest(UPDATE_POST, updatePostSaga);\n}\nconst initialState = {\n  title: '',\n  body: '',\n  tags: [],\n  post: null,\n  postError: null,\n  originalPostId: null\n};\nconst write = handleActions({\n  [INITIALIZE]: state => initialState,\n  // initialState를 넣으면 초기상태로 바뀜\n  [CHANGE_FIELD]: (state, _ref4) => {\n    let {\n      payload: {\n        key,\n        value\n      }\n    } = _ref4;\n    return { ...state,\n      [key]: value // 특정 key 값을 업데이트\n\n    };\n  },\n  [WRITE_POST]: state => ({ ...state,\n    // post와 postError를 초기화\n    post: null,\n    postError: null\n  }),\n  // 포스트 작성 성공\n  [WRITE_POST_SUCCESS]: (state, _ref5) => {\n    let {\n      payload: post\n    } = _ref5;\n    return { ...state,\n      post\n    };\n  },\n  // 포스트 작성 실패\n  [WRITE_POST_FAILURE]: (state, _ref6) => {\n    let {\n      payload: postError\n    } = _ref6;\n    return { ...state,\n      postError\n    };\n  },\n  [SET_ORIGINAL_POST]: (state, _ref7) => {\n    let {\n      payload: post\n    } = _ref7;\n    return { ...state,\n      title: post.title,\n      body: post.body,\n      tags: post.tags,\n      originalPostId: post._id\n    };\n  },\n  [UPDATE_POST_SUCCESS]: (state, _ref8) => {\n    let {\n      payload: post\n    } = _ref8;\n    return { ...state,\n      post\n    };\n  },\n  [UPDATE_POST_FAILURE]: (state, _ref9) => {\n    let {\n      payload: postError\n    } = _ref9;\n    return { ...state,\n      postError\n    };\n  }\n}, initialState);\nexport default write;","map":{"version":3,"sources":["C:/java/react/project_git/blog-frontend/src/modules/write.js"],"names":["createAction","handleActions","createRequestSaga","createRequestActionTypes","postsAPI","takeLatest","INITIALIZE","CHANGE_FIELD","WRITE_POST","WRITE_POST_SUCCESS","WRITE_POST_FAILURE","SET_ORIGINAL_POST","UPDATE_POST","UPDATE_POST_SUCCESS","UPDATE_POST_FAILURE","initialize","changeField","key","value","writePost","title","body","tags","setOriginalPost","post","updatePost","id","writePostSaga","updatePostSaga","writeSaga","initialState","postError","originalPostId","write","state","payload","_id"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as postsAPI from '../lib/api/posts';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\nconst INITIALIZE = 'write/INITIALIZE'; // 모든 내용 초기화\r\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; // 특정 key 값 바꾸기\r\nconst [\r\n  WRITE_POST,\r\n  WRITE_POST_SUCCESS,\r\n  WRITE_POST_FAILURE,\r\n] = createRequestActionTypes('write/WRITE_POST'); // 포스트 작성\r\nconst SET_ORIGINAL_POST = 'write/SET_ORIGINAL_POST';\r\nconst [\r\n  UPDATE_POST,\r\n  UPDATE_POST_SUCCESS,\r\n  UPDATE_POST_FAILURE,\r\n] = createRequestActionTypes('write/UPDATE_POST'); // 포스트 수정\r\n\r\nexport const initialize = createAction(INITIALIZE);\r\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\r\n  key,\r\n  value,\r\n}));\r\nexport const writePost = createAction(WRITE_POST, ({ title, body, tags }) => ({\r\n  title,\r\n  body,\r\n  tags,\r\n}));\r\nexport const setOriginalPost = createAction(SET_ORIGINAL_POST, post => post);\r\nexport const updatePost = createAction(\r\n  UPDATE_POST,\r\n  ({ id, title, body, tags }) => ({\r\n    id,\r\n    title,\r\n    body,\r\n    tags,\r\n  }),\r\n);\r\n\r\n// saga 생성\r\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.writePost);\r\nconst updatePostSaga = createRequestSaga(UPDATE_POST, postsAPI.updatePost);\r\n\r\nexport function* writeSaga() {\r\n  yield takeLatest(WRITE_POST, writePostSaga);\r\n  yield takeLatest(UPDATE_POST, updatePostSaga);\r\n}\r\n\r\nconst initialState = {\r\n  title: '',\r\n  body: '',\r\n  tags: [],\r\n  post: null,\r\n  postError: null,\r\n  originalPostId: null,\r\n};\r\n\r\nconst write = handleActions(\r\n  {\r\n    [INITIALIZE]: state => initialState, // initialState를 넣으면 초기상태로 바뀜\r\n    [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\r\n      ...state,\r\n      [key]: value, // 특정 key 값을 업데이트\r\n    }),\r\n    [WRITE_POST]: state => ({\r\n      ...state,\r\n      // post와 postError를 초기화\r\n      post: null,\r\n      postError: null,\r\n    }),\r\n    // 포스트 작성 성공\r\n    [WRITE_POST_SUCCESS]: (state, { payload: post }) => ({\r\n      ...state,\r\n      post,\r\n    }),\r\n    // 포스트 작성 실패\r\n    [WRITE_POST_FAILURE]: (state, { payload: postError }) => ({\r\n      ...state,\r\n      postError,\r\n    }),\r\n    [SET_ORIGINAL_POST]: (state, { payload: post }) => ({\r\n      ...state,\r\n      title: post.title,\r\n      body: post.body,\r\n      tags: post.tags,\r\n      originalPostId: post._id,\r\n    }),\r\n    [UPDATE_POST_SUCCESS]: (state, { payload: post }) => ({\r\n      ...state,\r\n      post,\r\n    }),\r\n    [UPDATE_POST_FAILURE]: (state, { payload: postError }) => ({\r\n      ...state,\r\n      postError,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default write;\r\n"]},"metadata":{},"sourceType":"module"}