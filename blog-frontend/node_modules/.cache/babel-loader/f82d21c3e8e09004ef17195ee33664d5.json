{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport produce from 'immer';\nimport { takeLatest } from 'redux-saga/effects';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport * as authAPI from '../lib/api/auth';\nconst CHANGE_FIELD = 'auth/CHANGE_FIELD';\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM';\nconst [REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE] = createRequestActionTypes('auth/REGISTER');\nconst [LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE] = createRequestActionTypes('auth/LOGIN');\nexport const changeField = createAction(CHANGE_FIELD, _ref => {\n  let {\n    form,\n    key,\n    value\n  } = _ref;\n  return {\n    form,\n    // register , login\n    key,\n    // username, password, passwordConfirm\n    value // 실제 바꾸려는 값\n\n  };\n});\nexport const initializeForm = createAction(INITIALIZE_FORM, form => form); // register / login\n\nexport const register = createAction(REGISTER, _ref2 => {\n  let {\n    username,\n    password\n  } = _ref2;\n  return {\n    username,\n    password\n  };\n});\nexport const login = createAction(LOGIN, _ref3 => {\n  let {\n    username,\n    password\n  } = _ref3;\n  return {\n    username,\n    password\n  };\n}); // saga 생성\n\nconst registerSaga = createRequestSaga(REGISTER, authAPI.register);\nconst loginSaga = createRequestSaga(LOGIN, authAPI.login);\nexport function* authSaga() {\n  yield takeLatest(REGISTER, registerSaga);\n  yield takeLatest(LOGIN, loginSaga);\n}\nconst initialState = {\n  register: {\n    username: '',\n    password: '',\n    passwordConfirm: ''\n  },\n  login: {\n    username: '',\n    password: ''\n  },\n  auth: null,\n  authError: null\n};\nconst auth = handleActions({\n  [CHANGE_FIELD]: (state, _ref4) => {\n    let {\n      payload: {\n        form,\n        key,\n        value\n      }\n    } = _ref4;\n    return produce(state, draft => {\n      draft[form][key] = value; // 예: state.register.username을 바꾼다\n    });\n  },\n  [INITIALIZE_FORM]: (state, _ref5) => {\n    let {\n      payload: form\n    } = _ref5;\n    return { ...state,\n      [form]: initialState[form],\n      authError: null // 폼 전환 시 회원 인증 에러 초기화\n\n    };\n  },\n  // 회원가입 성공\n  [REGISTER_SUCCESS]: (state, _ref6) => {\n    let {\n      payload: auth\n    } = _ref6;\n    return { ...state,\n      authError: null,\n      auth\n    };\n  },\n  // 회원가입 실패\n  [REGISTER_FAILURE]: (state, _ref7) => {\n    let {\n      payload: error\n    } = _ref7;\n    return { ...state,\n      authError: error\n    };\n  },\n  // 로그인 성공\n  [LOGIN_SUCCESS]: (state, _ref8) => {\n    let {\n      payload: auth\n    } = _ref8;\n    return { ...state,\n      authError: null,\n      auth\n    };\n  },\n  // 로그인 실패\n  [LOGIN_FAILURE]: (state, _ref9) => {\n    let {\n      payload: error\n    } = _ref9;\n    return { ...state,\n      authError: error\n    };\n  }\n}, initialState);\nexport default auth;","map":{"version":3,"sources":["C:/java/react/project_git/blog-frontend/src/modules/auth.js"],"names":["createAction","handleActions","produce","takeLatest","createRequestSaga","createRequestActionTypes","authAPI","CHANGE_FIELD","INITIALIZE_FORM","REGISTER","REGISTER_SUCCESS","REGISTER_FAILURE","LOGIN","LOGIN_SUCCESS","LOGIN_FAILURE","changeField","form","key","value","initializeForm","register","username","password","login","registerSaga","loginSaga","authSaga","initialState","passwordConfirm","auth","authError","state","payload","draft","error"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from 'redux-actions';\r\nimport produce from 'immer';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes\r\n} from '../lib/createRequestSaga';\r\nimport * as authAPI from '../lib/api/auth';\r\n\r\nconst CHANGE_FIELD = 'auth/CHANGE_FIELD';\r\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM';\r\n\r\nconst [REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE] = createRequestActionTypes(\r\n  'auth/REGISTER'\r\n);\r\n\r\nconst [LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE] = createRequestActionTypes(\r\n  'auth/LOGIN'\r\n);\r\n\r\nexport const changeField = createAction(\r\n  CHANGE_FIELD,\r\n  ({ form, key, value }) => ({\r\n    form, // register , login\r\n    key, // username, password, passwordConfirm\r\n    value // 실제 바꾸려는 값\r\n  })\r\n);\r\nexport const initializeForm = createAction(INITIALIZE_FORM, form => form); // register / login\r\nexport const register = createAction(REGISTER, ({ username, password }) => ({\r\n  username,\r\n  password\r\n}));\r\nexport const login = createAction(LOGIN, ({ username, password }) => ({\r\n  username,\r\n  password\r\n}));\r\n\r\n// saga 생성\r\nconst registerSaga = createRequestSaga(REGISTER, authAPI.register);\r\nconst loginSaga = createRequestSaga(LOGIN, authAPI.login);\r\nexport function* authSaga() {\r\n  yield takeLatest(REGISTER, registerSaga);\r\n  yield takeLatest(LOGIN, loginSaga);\r\n}\r\n\r\nconst initialState = {\r\n  register: {\r\n    username: '',\r\n    password: '',\r\n    passwordConfirm: ''\r\n  },\r\n  login: {\r\n    username: '',\r\n    password: ''\r\n  },\r\n  auth: null,\r\n  authError: null\r\n};\r\n\r\nconst auth = handleActions(\r\n  {\r\n    [CHANGE_FIELD]: (state, { payload: { form, key, value } }) =>\r\n      produce(state, draft => {\r\n        draft[form][key] = value; // 예: state.register.username을 바꾼다\r\n      }),\r\n    [INITIALIZE_FORM]: (state, { payload: form }) => ({\r\n      ...state,\r\n      [form]: initialState[form],\r\n      authError: null // 폼 전환 시 회원 인증 에러 초기화\r\n    }),\r\n    // 회원가입 성공\r\n    [REGISTER_SUCCESS]: (state, { payload: auth }) => ({\r\n      ...state,\r\n      authError: null,\r\n      auth\r\n    }),\r\n    // 회원가입 실패\r\n    [REGISTER_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      authError: error\r\n    }),\r\n    // 로그인 성공\r\n    [LOGIN_SUCCESS]: (state, { payload: auth }) => ({\r\n      ...state,\r\n      authError: null,\r\n      auth\r\n    }),\r\n    // 로그인 실패\r\n    [LOGIN_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      authError: error\r\n    })\r\n  },\r\n  initialState\r\n);\r\n\r\nexport default auth;\r\n"]},"metadata":{},"sourceType":"module"}